import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App extends Application {
    private final FileChooser fileChooser = new FileChooser();

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("PathFinder Assistant");

        // Create character button
        Button createClassicCharacterButton = new Button();
        createClassicCharacterButton.setText("Create Character - Classic Method");
        /* Open new window for editing a character */
        createClassicCharacterButton.setOnAction(event -> {
            System.out.println("Create Classic Method button pressed");
            new CharacterCreateWindow(CharacterCreateWindow.Method.CLASSIC);
        });

        Button createModernCharacterButton = new Button();
        createModernCharacterButton.setText("Create Character - Modern Method");
        createModernCharacterButton.setOnAction(event -> {
            System.out.println("Create Modern Method button pressed");
            new CharacterCreateWindow(CharacterCreateWindow.Method.MODERN);
        });

        Button createHeroicCharacterButton = new Button();
        createHeroicCharacterButton.setText("Create Character - Heroic Method");
        createHeroicCharacterButton.setOnAction(event -> {
            System.out.println("Create Heroic Method button pressed");
            new CharacterCreateWindow(CharacterCreateWindow.Method.HEROIC);
        });

        // Load character button
        Button loadCharacterButton = new Button();
        loadCharacterButton.setText("Load Character");

        /* Open new window for loading character */
        loadCharacterButton.setOnAction(event -> {
            System.out.println("Load Character Button Pressed");

            // if the default save directory doesn't exist, make it.
            File saveDirectory = new File("saves");
            if(!saveDirectory.exists()) {
                saveDirectory.mkdir();
            }

            FileChooser saveSelector = new FileChooser();
            saveSelector.setTitle("Select Your Save");
            File defaultDirectory = new File("saves" + File.separator);
            saveSelector.setInitialDirectory(defaultDirectory);
            saveSelector.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("JSON files (*.json)", "*.json")
            );

            File saveLocation = saveSelector.showOpenDialog(primaryStage);

            if (saveLocation != null) {
                CharacterEditWindow existingCharacterEditWindow = new CharacterEditWindow(saveLocation);
            }
        });

        // Quit button
        Button quitButton = new Button();
        quitButton.setText("Quit");
        quitButton.setOnAction(event -> primaryStage.close());

        VBox rootView = new VBox();

        rootView.getChildren().add(createClassicCharacterButton);
        rootView.getChildren().add(createModernCharacterButton);
        rootView.getChildren().add(createHeroicCharacterButton);
        rootView.getChildren().add(loadCharacterButton);
	      rootView.getChildren().add(rollDieWindowButton());
        rootView.getChildren().add(quitButton);
        rootView.setAlignment(Pos.CENTER);
        rootView.setSpacing(ApplicationConfig.DEFAULT_SPACING);
        rootView.setPadding(new Insets(ApplicationConfig.DEFAULT_PADDING));
        primaryStage.setScene(new Scene(rootView));

        primaryStage.show();
    }

    private void characterWindow(File file) {
        CharacterEditWindow newWindow;
        if (file != null) {
            newWindow = new CharacterEditWindow(file);
        } else {
            newWindow = new CharacterEditWindow();
        }
    }

    private Button rollDieWindowButton() {
	Button btn = new Button("Roll Dice");
	btn.setOnAction(event -> new DieRollWindow());
	return btn;
    }
}
